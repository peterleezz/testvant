<style lang="less" src="./index.less"></style>
<template>
  <view class="field-cell field {{ !showError ? 'field-error' : '' }}" @tap="tap">
    <view wx:if="{{ config.label }}" class="field-cell__hd field-title">{{ config.label }}</view>
    <textarea wx:if="{{ config.type === 'textarea' }}" auto-height maxlength="{{config.maxlength}}" value="{{ config.value }}" placeholder="{{ config.placeholder }}" disabled="{{config.disabled}}" focus="{{config.focus}}" class="field-input field-cell__bd {{ config.right ? 'field-input__right' : '' }}" placeholder-class="field-placeholder" bindinput="_handleFieldChange" bindfocus="_handleFieldFocus" bindblur="_handleFieldBlur" data-component-id="{{ config.componentId || '' }}" name="{{config.name}}"></textarea>
    <picker style="width:100%" wx:elif="{{ config.type === 'select' }}" @change="bindPickerChange" value="{{config.index}}" range-key="name" range="{{config.list}}">
      <input value="{{ config.list[config.index].id }}" style="display:none" name="{{config.name}}" />
      <input value="{{ config.list[config.index].name }}" disabled="{{config.disabled}}" placeholder="{{ config.placeholder }}" class="field-input field-cell__bd {{ config.right ? 'field-input__right' : '' }}" />
    </picker>
    <picker style="width:100%" wx:elif="{{ config.type === 'date' }}" @change="bindDateChange" value="{{config.value}}" mode="date">
      <input value="{{ config.value }}" disabled="{{config.disabled}}" placeholder="{{ config.placeholder }}" name="{{config.name}}" class="field-input field-cell__bd {{ config.right ? 'field-input__right' : '' }}" />
    </picker>
    <picker style="width:100%" wx:elif="{{ config.type === 'time' }}" @change="bindDateChange" value="{{config.value}}" mode="time">
      <input value="{{ config.value }}" disabled="{{config.disabled}}" placeholder="{{ config.placeholder }}" name="{{config.name}}" class="field-input field-cell__bd {{ config.right ? 'field-input__right' : '' }}" />
    </picker>
    <input wx:else type="{{ config.inputType || 'text' }}" maxlength="{{config.maxlength}}" name="{{config.name}}" value="{{ config.value }}" placeholder="{{ config.placeholder }}" disabled="{{config.disabled}}" focus="{{config.focus}}" class="field-input field-cell__bd {{ config.right ? 'field-input__right' : '' }}" placeholder-class="field-placeholder" adjust-position="{{config.adjust}}" bindinput="_handleFieldChange" bindfocus="_handleFieldFocus" bindblur="_handleFieldBlur" data-component-id="{{ config.componentId || '' }}" />
    <view wx:if="{{ config.clear && showClose }}" class="clear-content" catchtap="_handleClear">
      <text class="iconfont icon-closebg clear-btn"></text>
    </view>
    <text wx:if="{{ config.arrow}}" class="iconfont icon-right" />
  </view>
</template>
<script>
import wepy from 'wepy'

export default class Input extends wepy.component {
  props = {
    config: {
      type: Object,
      twoWay: true,
      coerce(c) {
        const obj = {
          error: Boolean(c.error) && true,
          clear: Boolean(c.clear) && true,
          adjust: Boolean(c.adjust) && true,
          value: c.value || '',
          name: c.name || '',
          label: c.label || '',
          list: c.list || [],
          index: c.index || 0,
          componentId: c.componentId || '',
          inputType: c.inputType || 'text',
          type: c.type || '',
          placeholder: c.placeholder || '',
          disabled: Boolean(c.disabled) && true,
          focus: Boolean(c.focus) && true,
          right: Boolean(c.right) && true,
          maxlength: c.maxlength || 9999,
          filter: c.filter || ''
        }
        return obj
      }
    }
  }

  components = {}

  data = {
    showClose: false,
    showError: true
  }

  methods = {
    tap: e => {
      this.$emit('tap', this.config)
    },
    _handleClear() {
      this.config.value = ' '
      setTimeout(() => {
        this.config.value = ''
        this.showClose = false
        this.$apply()
      }, 10)
      this.$emit('onInput', '', e)
    },
    _handleFieldChange(e) {
      const value = e.detail.value
      const { config } = this
      if (config.clear) {
        this.showClose = value.length > 0
      }
      this.config.value = value //it will lost the focus
      this.config.focus = true
      this.$emit('onInput', value, this.config)
    },
    _handleFieldFocus(e) {
      // console.log(77777)
    },
    _handleFieldBlur(e) {
      const value = e.detail.value
      const { config } = this
      if (config.filter) {
        this.showError = config.filter.test(value)
      }
      this.$emit('onBlur', value)
    },
    bindPickerChange: e => {
      this.config.index = e.detail.value
      this.config.value = e.detail.value
      this.$emit('onchange', e.detail.value, this.config)
    },
    bindDateChange: e => {
      this.config.value = e.detail.value
      this.$emit('onchange', e.detail.value, this.config)
    }
  }

  onLoad() {
    const { config } = this
    if (config.clear) {
      this.showClose = config.value.length > 0
      this.$apply()
    }
  }
}

</script>

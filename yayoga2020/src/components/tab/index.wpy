<style lang="less" src="./index.less"></style>
<template>
  <view class="tab-container tab-cls{{tabData.id}}  {{tabData.class ? tabData.class : ''}}">
    <block wx:if="{{tabData.scroll}}">
      <scroll-view
        scroll-x
        class="scroll-tab-content"
        style="height:{{tabData.height ? tabData.height+2 : 45+2}}px;"
        id="scroll{{tabData.id}}"
        scroll-left="{{left}}"
        scroll-with-animation="true"
      >
        <view class="scroll-tab__content">
          <repeat for="{{tabData.list}}" index="index" item="item" key="key">
            <view
              class="tab tab{{tabData.id}}"
              data-id="{{item.id}}"
              data-index="{{index}}"
              style="height:{{tabData.height ? tabData.height : 45}}px;line-height: {{tabData.lheight ? tabData.lheight : 45}}px"
              catchtap="selectTab({{item}})"
            >
              <view class="tab-text tab-text{{tabData.id}}">{{ item.title }}</view>
              <view class="sub-tab-text">{{ item.subtitle }}</view>
            </view>
          </repeat>
          <view class="animate-border" animation="{{animationData}}"></view>
        </view>
      </scroll-view>
    </block>
    <block wx:else>
      <view class="tab-content">
        <repeat for="{{tabData.list}}" index="index" item="item" key="key">
          <view
            class="tab tab{{tabData.id}}"
            data-index="{{index}}"
            style="height:{{tabData.height ? tabData.height : 45}}px;line-height: {{tabData.lheight ? tabData.lheight : 45}}px"
            catchtap="selectTab({{item}})"
          >
            <view class="tab-text tab-text{{tabData.id}}">
              <view>{{ item.title }}</view>
              <view class="sub-tab-text">{{ item.subtitle }}</view>
            </view>
          </view>
        </repeat>
        <view class="animate-border" animation="{{animationData}}"></view>
      </view>
    </block>
  </view>
</template>
<script>
import wepy from 'wepy'

export default class Tab extends wepy.component {
  props = {
    tabData: {}
  }

  data = {
    selectedId: '',
    left: 0,
    clientArr: [],
    textArr: [],
    wWidth: 0,
    animationData: {},
    animation: {}
  }

  events = {}

  methods = {
    selectTab(item, e) {
      const index = e.currentTarget.dataset.index
      this.doSelect(index)
    }
  }

  watch = {
    tabData(newValue, oldValue) {
      if (oldValue) {
        this.doAnimateBorder()
      } else {
        this.getClientArr()
      }
    }
  }

  doSelect(index) {
    const { tabData, selectedId } = this
    if (tabData.scroll) {
      if (index > selectedId) {
        this.getScrollOffset('right', index)
      } else {
        this.getScrollOffset('left', index)
      }
    }
    this.selectedId = index
    this.$apply()
    this.$emit('bindChange', tabData.list[index].id)
  }

  changeIndex(data) {
    this.doSelect(data.index)
  }

  doInitTabData(data, isAsync = false) {
    this.tabData = data
    if (this.tabData.id === undefined) {
      this.tabData.id = 1
    }
    this.$apply()
    this.getClientArr()
    if (isAsync) {
      this.onLoad()
    }
  }

  changeScroll(data, index) {
    const { clientArr } = this
    const left = clientArr[index] ? clientArr[index].left : ''
    if (!left) {
      return false
    }
    if (left <= data.scrollLeft + 100) {
      this.left = left - 100
      this.$apply()
    }
  }

  onLoad() {
    let animation = wx.createAnimation({
      duration: 100,
      timingFunction: 'ease-in-out'
    })
    this.animation = animation
    if (this.tabData !== undefined && this.tabData.scroll) {
      wx.getSystemInfo({
        success: res => {
          this.wWidth = res.windowWidth
        }
      })
    }
  }

  getClientArr() {
    wx.createSelectorQuery()
      .selectAll(`.tab-text${this.tabData.id}`)
      .boundingClientRect(res => {
        // console.log(res)
        if (res.length > 0) {
          this.textArr = res
        }
      })
      .exec()
    wx.createSelectorQuery()
      .selectAll(`.tab${this.tabData.id}`)
      .boundingClientRect(res => {
        // console.log(res)
        if (res.length > 0) {
          this.clientArr = res
          if (this.tabData.scroll) {
            this.initScrollPosition()
            this.doAnimateBorder()
          } else {
            this.doAnimateBorder()
          }
        }
      })
      .exec()
  }

  doAnimateBorder() {
    const { textArr, tabData, clientArr } = this
    const index = this.getIndex(tabData)
    const cWidth = clientArr[index].width
    const cLeft = clientArr[index].left
    const width = textArr.length > 0 ? textArr[index].width : 0
    const left = textArr.length > 0 ? textArr[index].left : 0
    this.animation
      .width(cWidth)
      .translate3d(cLeft, 0, 0)
      .step({ duration: 400 })
      .width(width)
      .translate3d(left, 0, 0)
      .step({ duration: 400 })
    this.animationData = this.animation.export()
    this.$apply()
  }

  getIndex(tabData) {
    for (let i = 0; i < tabData.list.length; i++) {
      if (tabData.selectedId === tabData.list[i].id) {
        return i
      }
    }
  }

  initScrollPosition() {
    const { tabData } = this
    let index = this.getIndex(tabData)
    this.selectedId = index
    wx.createSelectorQuery()
      .select(`.tab-cls${this.tabData.id}`)
      .boundingClientRect(res => {
        this.getScrollOffset('right', index)
      })
      .exec()
  }

  getScrollOffset(type, index) {
    wx.createSelectorQuery()
      .select(`#scroll${this.tabData.id}`)
      .scrollOffset(res => {
        const offsetLeft = res.scrollLeft
        const { clientArr, wWidth } = this
        if (type === 'right') {
          const nextClient = clientArr[index + 1]
          if (nextClient) {
            const right = nextClient.right
            if (right - wWidth > offsetLeft) {
              this.left = right - wWidth
            }
          }
        } else {
          const prevClient = clientArr[index - 1]
          if (prevClient) {
            const right = prevClient.right
            const left = prevClient.left
            const width = prevClient.width
            if (right - width < offsetLeft) {
              this.left = left
            }
          }
        }

        this.$apply()
      })
      .exec()
  }
}
</script>

<style lang="less">
  page {
  background: url('https://mp.weixin.qq.com/wxopen/basicprofile?action=get_headimg&token=913083250&t=1606566547302');
  background-repeat: no-repeat;
  display: flex;
  justify-content: center;
  align-items: center;

}

.content {
  width: 90%;
}

.logo {
  display: flex;
  justify-content: center;
  margin-bottom: 100rpx;
}

.van-button {
  margin: 20rpx 0;
}
.authpanel{
  display:flex;
   justify-content: center;
   align-items: center;
   padding:100rpx;
}

</style>
<template>
  <div class="content">
    <van-popup show="{{ show_auth_pop }}" bind:close="onClose" class="authpanel" round custom-style="width:80%;padding:100rpx 100rpx;">
      <van-image round width="200rpx" height="200rpx" fit="fill" src="/static/background.jpeg" class="logo" />
      <div>
        申请获得你的公开信息，请点击允许，以获取更多资讯
      </div>
      <van-button type="primary" size="large" openType="getUserInfo" @getuserinfo="getUserInfo($event)" round>授权获取微信信息</van-button>
    </van-popup>
    <van-image round width="200rpx" height="200rpx" fit="fill" src="/static/background.jpeg" class="logo" />
    <div v-if="login_type==2">
      <van-field model:value="{{phone}}" ref="phone" @change="vanfiledchangehack($event)" placeholder="请输入手机号码" clearable required bind:click-icon="onClickIcon" :error-message="error1" />
      <van-field :error-message="error2" model:value="{{ verify_code }}" ref="verify_code" @change="vanfiledchangehack($event)" required center clearable placeholder="请输入短信验证码" border="{{ false }}" use-button-slot>
        <van-button slot="button" size="small" type="primary" @tap="sendverify" v-if="!disabled">
          发送验证码
        </van-button>
        <van-button slot="button" size="small" type="primary" :disabled="true" v-if="disabled">
          <van-count-down time="{{ 120000 }}" format="ss 秒后再试" @finish="finished" />
        </van-button>
      </van-field>
    </div>
    <div class="loginbtn">
      <van-button v-if="login_type!=2" type="primary" size="large" openType="getPhoneNumber" @getphonenumber="wxlogin($event)" round class="van-hairline--left van-hairline--top">微信号码登录</van-button>
      <van-button type="info" size="large" round @tap="login_type=2" v-if="login_type!=2">手机号码登录</van-button>
      <van-button type="info" size="large" round @tap="phonelogin" v-if="login_type==2">手机号码登录</van-button>
      <van-button v-if="login_type==2" plain type="primary" size="large" openType="getPhoneNumber" @getphonenumber="wxlogin($event)" round class="van-hairline--left van-hairline--top">微信号码登录</van-button>
    </div>
  </div>
  <van-toast id="van-toast" />
</template>
<script>
import wepy from '@wepy/core'
import event from 'event'
import { mapState, mapGetters, mapMutations } from '@wepy/x'
import store from 'store'
import Toast from '@/components/vant/toast/toast'
import auth from '@/api/user'
import mixin from 'mixin'

import { phoneR, verifyR } from '@/common/Rules'
let toast = null
wepy.page({
  store,
  mixins: [mixin],

  data: {
    show_auth_pop: false,
    disabled: false,
    inputmodel: '',
    login_type: 0, //0-default  1-自动获取微信号码 2-通过手机号码登录
    phone: '',
    verify_code: '',
    error1: '',
    error2: '',

  },

  computed: {
    ...mapGetters(['token', 'session_key'])
  },
  watch: {

  },
  methods: {
    ...mapMutations(['login']),
    finished() {
      this.disabled = false
    },
    async sendverify() {

      let { isValid, message } = this.check(phoneR, this.phone)
      console.log(this.phone)
      this.error1 = message
      if (!isValid) return
      this.disabled = true

      try {
        await auth.code(this.phone)

        Toast.success('验证码已发送')

      } catch (e) {
        Toast.fail(e)
      }


    },



    async phonelogin() {
      let ret1 = this.check(phoneR, this.phone)
      let ret2 = this.check(verifyR, this.verify_code)
      console.log(ret1, ret2)
      this.error1 = ret1.message
      this.error2 = ret2.message
      if (!(ret1.isValid && ret2.isValid)) return
      let data = { phone: this.phone, verify_code: this.verify_code }
      try {
        toast = Toast.loading({
          message: '正在登陆...',
          duration: 0,
          forbidClick: true,
        })


        const rsp = await auth.login(data)
        this.login(rsp)
        Toast.clear()
        if (rsp.token != '') {

          wx.navigateBack()
          return rsp
        }
        Toast.fail('登陆失败')
      } catch (err) {
        Toast.fail(err)
      }


    },


    async wxlogin(e) {
      this.checkAuthed()
      console.log('get wx phone and login ', e)
      e = e.$wx
      toast = Toast.loading({
        message: '正在获取信息...',
        duration: 0,
        forbidClick: true,
      })
      if (e.detail.errMsg !== 'getPhoneNumber:ok') {


        Toast.clear()
        Toast.fail('您取消了微信授权，请手动登陆')
        this.login_type = 2
        return
      }
      let rsp = await this.getPhoneNumAndLogin(e)

      Toast.clear()
      if (!rsp)
        Toast.fail('微信登陆失败，请使用手机号码验证登陆')
      this.login_type = 2
    },

    async getUserInfo(e) {
      this.show_auth_pop = false
      e = e.$wx
      if (e.detail.errMsg !== 'getUserInfo:ok') {
        Toast.fail('您取消了微信授权，请手动登陆')
      }
      await this.autoLogin()

    },

    async getPhoneNumAndLogin(e) {


      console.log('auto login ', e)
      toast.setData({ message: '获取微信信息' })
      const res = await wx.login()
      toast.setData({ message: '获取用户信息' })
      const userInfo = await wx.getUserInfo()
      const data = e.detail

      data.code = res.code
      data.avatar = userInfo.userInfo.avatarUrl
      data.nickname = userInfo.userInfo.nickName

      data.session_key = this.session_key

      try {
        toast.setData({ message: '自动登陆' })
        const rsp = await auth.loginByPhone(data)
        this.login(rsp)
        if (rsp.token != '') {
          wx.navigateBack()
          return rsp
        }

      } catch (err) {}
      toast.setData({ message: '自动登陆失败，请手动登陆' })
      return false
    },
    async autoLogin(e) {
      console.log('auto login ', e)
      const res = await wx.login()
      const userInfo = await wx.getUserInfo()
      const data = {}

      data.code = res.code
      data.avatar = userInfo.userInfo.avatarUrl
      data.nickname = userInfo.userInfo.nickName
      data.iv = userInfo.iv
      data.encryptedData = userInfo.encryptedData
      data.session_key = this.session_key

      try {
        console.log('before auto login')
        const rsp = await auth.autoLogin(data)

        console.log('should login', rsp)
        this.login(rsp)
        if (rsp.token != '') {
          wx.navigateBack()
          return rsp
        }


      } catch (err) {
        console.log('catch error ', err)
      }
      return false
    },
    async checkAuthed() {
      const { authSetting } = await wx.getSetting()
      if (authSetting['scope.userInfo']) {
        return true
      } else {
        console.log('no scope,login manunal')
        this.show_auth_pop = true
        return false
      }
    }
  },



  async onLoad({ login_type }) {
    this.login_type = login_type
    if (login_type != 2) {
      let ret = await this.checkAuthed()
      if (ret) await this.autoLogin()
    }

  }
})

</script>
<config>
  {
  navigationBarTitleText: '登陆',
  usingComponents: {
  "van-field": "module:vant/field/index",
  "van-button": "module:vant/button/index",
  "van-image": "module:vant/image/index",
  "van-toast": "module:vant/toast/index",
  "van-popup": "module:vant/popup/index",
  "van-count-down": "module:vant/count-down/index",
  "van-cell-group": "module:vant/cell-group/index",
  }
  }
</config>
